# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rEhLSkXfOkX1aEfuloNe5XMTTNnr7jjc
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

car_dataset = pd.read_csv('/content/sample_data/car data.csv')

car_dataset.head()

car_dataset.tail()

car_dataset.shape
car_dataset.info()

car_dataset.isnull().sum()

print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

# encoding the data
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

car_dataset.head()

#splitting the data into TRAINING AND TESTING DATA
X = car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y = car_dataset['Selling_Price']

print(X)
print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, random_state=2)

#Applying linear regression

lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train,Y_train)

training_data_prediction = lin_reg_model.predict(X_train)

#r squared error

error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared error" , error_score)

plt.scatter(Y_train, training_data_prediction)
plt.xlabel('Actual price')
plt.ylabel('predicted price')
plt.title(" Actual prices vs predicted prices")
plt.show()

#lasso regression

lass_reg_model = Lasso()

lass_reg_model.fit(X_train,Y_train)

lass_pred = lass_reg_model.predict(X_train)

r_error = metrics.r2_score(Y_train , lass_pred)
print(r_error)

plt.scatter(Y_train , lass_pred)
plt.xlabel('Actual price')
plt.ylabel('predicted price')
plt.show()